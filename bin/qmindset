#!/usr/bin/env ruby
# Usage: qmindset [-f input_file] [DEVICE]

require 'ostruct'
require 'optparse'

require 'rubygems'
require 'json/ext'

require 'Qt4'

require 'mindset'

# TODO: record data : reord/stop record button. save-button.
# TODO: event buttons, with textbox for event label.
 
# ----------------------------------------------------------------------
=begin rdoc
Timer that fires 8 times a second
=end
class MindsetTimer < Qt::Object
  attr_reader :id, :obj

  def initialize(obj)
    super(nil)
    @obj = obj
    @id = startTimer(125)
  end

  def timerEvent(event)
    @obj.timerEvent
  end

  def stopTimer
    killTimer @id
  end
end

# ----------------------------------------------------------------------
=begin rdoc
Basic widget for plotting data
=end
class PlotWidget < Qt::Widget

  def initialize(w_width, w_height, parent)
    super parent
    @items = []
    @buffer ||= {}
    @x_mul ||= 1

    init_pens
    resize Qt::Size.new(w_width, w_height)
    sizePolicy = Qt::SizePolicy::Preferred

    @scene = Qt::GraphicsScene.new
    @view = Qt::GraphicsView.new(@scene, self)
    set_view_size(w_width, w_height)

    @view.renderHint = Qt::Painter::Antialiasing
    @view.show

    set_background
  end

=begin rdoc
Add packets from Array of Packet objects. This will extract only the
packets which have data relevant to the plot.
=end
  def add_data(packets)
    @buffer.keys.each { |k| @buffer[k].concat extract_packets(packets, k) }
    trim_data
  end

=begin rdoc
Extract data from relevant packets into an Array of values.
=end
  def extract_packets(packets, name)
    packets.inject([]) { |arr, p| arr << p[name] if p[name]; arr }
  end

=begin rdoc
Limit the number of stored datapoints to just enough for display. This allows
the display to start at buffer offset zero, which simplifies things.
=end
  def trim_data
    @buffer.keys.each do |k| 
      diff = @buffer[k].count - (1.0 * @scene_width / @x_mul).ceil.to_i
      @buffer[k] = @buffer[k].drop(diff) if diff > 0
    end
  end

=begin rdoc
Plot the data stored in the buffer.
=end
  def plot_data
    clear_lines
    @buffer.keys.each { |k| plot_data_line(k, @buffer[k]) }
  end

=begin rdoc
Plot datapoints in Array using QBrush object allocated for 'sym'.
=end
  def plot_data_line(sym, data)
    return if data.empty? or data.count == 1
    set_delta_and_offset(data)

    ppath = Qt::PainterPath.new(Qt::PointF.new 0, scale_y(data[0]))
    data[1..-1].each_with_index do |val, idx|
      x = idx * @x_mul
      ppath.line_to(Qt::PointF.new x, scale_y(val))
    end
    @items << @scene.addPath(ppath, @pens[sym])
  end

=begin rdoc
Remove all previously-plotted lines from the plot.
=end
  def clear_lines
    @items.each { |item| @scene.removeItem item }
    @items.clear
  end

  def resizeEvent(ev)
    set_view_size(ev.size.width, ev.size.height)
  end

  private

  def scale_y(val)
    ((val + @offset) * @delta).to_i
  end

  def set_delta_and_offset(data)
    min = data.min
    max = data.max 
    diff = max - min
    diff = 1 if diff == 0
    disp_diff = @scene_height
    @delta = (1.0 * disp_diff) / diff
    @offset = -min
  end

  def set_view_size(w_width, w_height)
    @scene_height = w_height - 10
    @scene_width = w_width - 10
    @scene.setSceneRect(0, 0, @scene_width, @scene_height)
    @view.resize Qt::Size.new(w_width, w_height)
    trim_data
  end

  def make_pen(col, p_width, ltype=Qt::SolidLine)
    pen = Qt::Pen.new
    pen.setColor Qt::Color.new(col)
    pen.width = p_width
    pen.style = ltype
    pen.joinStyle = Qt::RoundJoin
    pen
  end

  def init_pens
    @pens = {
      :wave => make_pen(Qt::green, 1),
      :delta => make_pen(Qt::white, 3),
      :theta => make_pen(Qt::yellow, 3),
      :lo_alpha => make_pen(Qt::red, 3, Qt::DotLine),
      :hi_alpha => make_pen(Qt::darkRed, 3, Qt::DashLine),
      :lo_beta => make_pen(Qt::green, 3, Qt::DotLine),
      :hi_beta => make_pen(Qt::darkGreen, 3, Qt::DashLine),
      :lo_gamma => make_pen(Qt::blue, 3, Qt::DotLine),
      :mid_gamma => make_pen(Qt::darkBlue, 3, Qt::DashDotLine),
      :attention => make_pen(Qt::red, 4),
      :meditation => make_pen(Qt::blue, 4)
    }
  end

  def set_background
    @scene.backgroundBrush = Qt::Color.new(Qt::black)
    # this breaks for some reason
    #@scene.foregroundBrush = Qt::Color.new(Qt::white)
  end
end

# ----------------------------------------------------------------------
=begin rdoc
Widget for plotting RAW wave data.
=end
class WavePlotWidget < PlotWidget
  def initialize(width, height, parent)
    @x_mul = 2
    @buffer = []
    super
    setToolTip('Raw EEG Data')
  end

  def add_data(packets)
    @buffer.concat extract_packets(packets, :wave)
    trim_data
  end

  def trim_data
    diff = @buffer.count - (@scene_width / @x_mul).to_i
    @buffer = @buffer.drop(diff) if diff > 0
  end

  def plot_data
    clear_lines
    plot_data_line(:wave, @buffer)
  end
end

# ----------------------------------------------------------------------
=begin rdoc
Widget for plotting ASIC EEG brainwave data.
=end
class AsicPlotWidget < PlotWidget
  def initialize(width, height, parent)
    @x_mul = 50
    @buffer = {
      :delta => [],
      :theta => [],
      :lo_alpha => [],
      :hi_alpha => [],
      :lo_beta => [],
      :hi_beta => [],
      :lo_gamma => [],
      :mid_gamma => []
    }
    super
    setToolTip("ASIC EEG Brainwave data (w=delta, y=theta, r=alpha, g=beta, b=gamma)")
  end
end

# ----------------------------------------------------------------------
=begin rdoc
Widget for plotting Thinkgear eSENSE data.
=end
class EsensePlotWidget < PlotWidget
  def initialize(width, height, parent)
    @x_mul = 8
    @buffer = {
      :attention => [],
      :meditation => []
    }
    super
    setToolTip("eSENSE (r=attention, b=meditation)")
  end
end

# ----------------------------------------------------------------------
=begin rdoc
Main window. This is just a simple container for the other windows.
=end
class MindsetWindow < Qt::Widget
  slots 'event_button_clicked()', 'record_button_clicked()'

  attr_reader :timer, :packets
  attr_reader :wave_plot, :asic_plot, :esense_plot
  attr_reader :rec_btn, :event_btn, :event_text, :status_label

  REC_LABEL = "\u25C9"
  STOP_LABEL = "\u25A0" 
  READY_STATUS = "Press 'q' to Quit."

  def initialize(conn, win_size=Qt::Size.new(800,600), parent=nil)
    super parent
    resize( win_size )

    @conn = conn
    w_height = (height / 2) - 10
    w_width = (width / 3) - 2 
    @wave_plot = WavePlotWidget.new width - 4, w_height, self
    @asic_plot = AsicPlotWidget.new (w_width * 2), w_height, self
    @esense_plot = EsensePlotWidget.new w_width, w_height, self
    @rec_btn = Qt::PushButton.new(REC_LABEL)
    # FIXME: tooltip
    @event_btn = Qt::PushButton.new('Event')
    # FIXME: tooltip
    @event_text = Qt::LineEdit.new('Unknown event')
    # FIXME: tooltip
    @status_label = Qt::Label.new(READY_STATUS)

    hbox = Qt::HBoxLayout.new
    hbox.add_widget(@event_text)
    hbox.add_widget(@event_btn)
    hbox.addStretch 256
    hbox.add_widget(@status_label)
    hbox.addSpacing 64
    hbox.add_widget(@rec_btn)

    grid = Qt::GridLayout.new
    grid.setSpacing 2
    grid.setMargin 2
    grid.addWidget(@wave_plot, 0, 0, 2, 3)  # row, col, rowspan, colspan
    grid.addWidget(@asic_plot, 2, 0, 1, 2)
    grid.addWidget(@esense_plot, 2, 2)

    grid.addLayout(hbox, 3, 0, 1, 3)
    setLayout grid

    @event_btn.enabled = false
    Qt::Object.connect(@event_btn, SIGNAL('clicked()'), 
                       self, SLOT('event_button_clicked()'))
    Qt::Object.connect(@rec_btn, SIGNAL('clicked()'), 
                       self, SLOT('record_button_clicked()'))
    self.windowTitle = "Mindset"

    @recording = false
    init_recording_buffer
    @timer = MindsetTimer.new(self)
  end

  def keyPressEvent(event)
    case event.key
      when Qt::Key_Q
        $qApp.quit()
        return
    end
  end

  def timerEvent
    pkts = @conn.read_packet
    return if (! pkts) or (pkts.empty?)

    append_recorded_data( pkts ) if @recording

    [@wave_plot, @asic_plot, @esense_plot].each do |w|
      w.add_data pkts
      w.plot_data
    end
  end

  def event_button_clicked
    ts = Time.now

    # FIXME: save event
$stderr.puts "SAVING EVENTS NOT YET IMPLEMENTED"

    set_status "Event saved at #{ts.strftime '%H:%M:%S'}."

  end

  def record_button_clicked
    if @recording
      @recording = false
      save_recording
      @rec_btn.text = REC_LABEL
    # FIXME: tooltip
      @event_btn.enabled = false
    else
      @recording = true
      set_status "Recording."
      @rec_btn.text = STOP_LABEL
    # FIXME: tooltip
      @event_btn.enabled = true
    end
  end

  def set_status(str)
    @status_label.text = str
  end

  def save_recording
    ts = Time.now
    @packets[:end_ts] = ts
    fname = "MindsetEEG-#{ts.strftime('%Y%m%d-%H:%M:%S')}.json"
    try_to_save = true
    while try_to_save
      path = Qt::FileDialog.getSaveFileName self, tr('Save data as...'),  
                                            fname, tr('JSON data (*.json)')
      if ! path
        set_status "Data not saved! #{READY_STATUS}"
        break
      end

      begin
        File.open(path, 'w') { |f| f.puts @packets.to_json }
        set_status "Data saved to '#{path}' #{READY_STATUS}"
        try_to_save = false
      rescue Exception => e
        $stderr.puts e.message
      end
    end

    init_recording_buffer
  end

  def init_recording_buffer
    @packets = Mindset::PacketStore.new
  end

  def append_recorded_data( pkts )
    pkts.each { |pkt| pkt.each { |k,v| @packets[k] << v } }
  end

  def cleanup
    @timer.stopTimer
    save_recording if @recording
    @recording = false
  end
end

# ----------------------------------------------------------------------
=begin rdoc
Qt Application for managing Main Window.
=end
class MindsetApp < Qt::Application
  slots 'cleanup()'


  attr_reader :server, :connection, :window

  def initialize( args )
    super(args)

    options = get_options(args)

    Qt::Object.connect(self, SIGNAL('aboutToQuit()'), self, SLOT('cleanup()'))

    ['INT', 'KILL', 'TERM', 'SEGV'].each { |sig| trap(sig) { cleanup } }

    connect(options)

    show_window(options)
  end

  def cleanup
    @window && @window.cleanup
    @connection && @connection.disconnect
    @server && @server.stop
  end

  def connect(options)
    if (options.use_device)
      connect_device(options)
    else
      connect_loopback(options)
    end

    if ! @connection
      $stderr.puts "Unable to connect to headset"
      cleanup
      exit 3
    end
  end

  private

  def connect_device(options)
    if (! File.exist? options.device)
      $stderr.puts "Device not found: #{options.device}"
      exit 1
    end

    @server = Mindset::Device.start
    if ! server
      $stderr.puts "Unable to start Mindset Device service!"
      emit :quit
      exit 2
    end
    @server.connect(options.device)
    @connection = @server.connection
  end

  def connect_loopback(options)
    data = JSON.parse(File.read(options.data_file), :symbolize_names => true)
    @connection = Mindset::LoopbackConnection.new(data)
  end

  def show_window(options)
    rect = desktop.screenGeometry
    win_size = Qt::Size.new (rect.width - 20), (rect.height - 50)
    @window = MindsetWindow.new(@connection, win_size)
    @window.show()
  end

  def get_options(args)
    options = OpenStruct.new

    options.use_device = true
    options.data_file = nil
    options.device = Mindset::Connection::SERIAL_PORT

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename $0} [-h] [-f filename] [DEVICE]"
      opts.separator "Note: DEVICE defaults to #{options.device}"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-f', '--input-file path', 'File containing JSON EEG data') {|str|
        options.use_device = false
        options.data_file = str
      }
      opts.on_tail('-h', '--help', 'Show help screen') { puts opts; exit 1 }
    end

    opts.parse! args

    options.device = args.shift if (! args.empty?)
    options
  end
end

# ----------------------------------------------------------------------
if __FILE__ == $0
  app = MindsetApp.new(ARGV)
  app.exec()
end
